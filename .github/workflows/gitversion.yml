name: Version Management

on:
  push:
    branches:
      - main
      - develop
      - 'releases/**'
      - 'hotfix/**'
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: write
  pull-requests: read

jobs:
  version:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tomli tomli-w

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install package locally
      run: pip install -e .  # This installs from local directory instead of PyPI

    - name: Check and update version
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      id: check_version
      run: |
        # Python script to handle version management
        VERSION=$(python -c "
        import tomli, tomli_w, subprocess
        
        def get_latest_tag_version():
            try:
                result = subprocess.run(['git', 'describe', '--tags', '--abbrev=0'], 
                                     capture_output=True, text=True)
                if result.returncode == 0:
                    return result.stdout.strip().lstrip('v')
                return None
            except:
                return None
        
        def version_to_tuple(version):
            return tuple(map(int, version.split('.')))
        
        # Read current version from pyproject.toml
        with open('pyproject.toml', 'rb') as f:
            data = tomli.load(f)
        current = data['tool']['poetry']['version']
        
        # Get latest tag version
        latest_tag = get_latest_tag_version()
        
        # Compare versions if tag exists
        if latest_tag:
            current_tuple = version_to_tuple(current)
            tag_tuple = version_to_tuple(latest_tag)
            
            # If pyproject version is greater than latest tag, respect it
            if current_tuple > tag_tuple:
                print(current)
                exit(0)
        
        # Otherwise increment the patch version
        major, minor, patch = version_to_tuple(current)
        new_version = f'{major}.{minor}.{patch + 1}'
        
        # Update pyproject.toml
        data['tool']['poetry']['version'] = new_version
        with open('pyproject.toml', 'wb') as f:
            tomli_w.dump(data, f)
        
        print(new_version)
        ")
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Version set to: $VERSION"

    - name: Commit version update
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Check if pyproject.toml was modified
        if git diff --quiet pyproject.toml; then
          echo "No version changes to commit"
          exit 0
        fi
        
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        git add pyproject.toml
        git commit -m "chore: Bump version to ${{ env.VERSION }} [skip ci]"
        git push
      
    - name: Create version tag
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/releases/'))
      run: |
        VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['tool']['poetry']['version'])")
        
        # Check if tag already exists
        if ! git rev-parse "v$VERSION" >/dev/null 2>&1; then
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          echo "Created and pushed tag v$VERSION"
        else
          echo "Tag v$VERSION already exists"
        fi 